// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  image    String?
  phone    String?
  role     Role    @default(admin)
}

enum Role {
  admin
}

//quotes ------------------------------------------
model Quote {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  number        String
  customer      String
  details       QuoteDetails[]
  requestedDate DateTime
  quoteSent     DateTime?
  file          String         @default("pending")
  status        QuoteStatus    @default(PENDING)
}

type QuoteDetails {
  description String
  id          String
}

enum QuoteStatus {
  PENDING
  FINISHED
}

//------------------------------------------------

// sale orders received and sent-----------------

model SaleOrder {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  number           String
  date             DateTime
  providerName     String
  providerAddress  String
  providerLine     String
  providerEmail    String
  providerRut      String
  providerCity     String
  providerPhone    String
  providerContact  String
  accordingToQuote String
  requestedBy      String
  emittedBy        String
  approvedBy       String
  materials        Material[]
  receptionGuide   String     @default("pending")
  status           Status     @default(PENDING)
  discount         Int
  // AssignedMaterials AssignedMaterials[]
}

model ReceivedSaleOrder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  file         String   @default("pending")
  number       String
  receivedDate DateTime
}

//----------------------------

// model AssignedMaterials {
//   id               String    @id @default(auto()) @map("_id") @db.ObjectId
//   material         Material
//   assignedQuantity Int
//   workOrderId      String    @db.ObjectId
//   saleOrderId      String    @db.ObjectId
//   workOrder        WorkOrder @relation(fields: [workOrderId], references: [id])
//   saleOrder        SaleOrder @relation(fields: [saleOrderId], references: [id])
// }

type Material {
  name      String
  unitPrice Int
  quantity  Int
  code      String
  id        String
}

enum Status {
  PENDING
  IN_PROCESS
  NOT_MATCHING
  ARRIVED
}

model WorkOrder {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  revision    String
  code        String
  number      String
  description String

  //general info
  client         String
  startDate      DateTime
  endDate        DateTime
  estimatedDate  DateTime
  quoteNumber    String
  requiresPlaque String

  //component info
  componentName   String
  componentDevice String
  model           String
  deviceNumber    String

  materials WorkOrderMaterial[]
}

type WorkOrderMaterial {
  name            String
  unitPrice       Int
  quantity        Int
  code            String
  id              String
  discount        Int
  saleOrderNumber String
}
